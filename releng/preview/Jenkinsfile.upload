/**
 * This Jenkinsfile handles updating metadata and uploading the Theia installers
 * It's designed to be run automatically after the sign job
 */

import groovy.json.JsonSlurper

pipeline {
    agent none
    options {
        timeout(time: 5, unit: 'HOURS')
        disableConcurrentBuilds()
        durabilityHint('MAX_SURVIVABILITY')
    }
    parameters {
        string(name: 'BUILD_NUMBER_PARAM', defaultValue: '', description: 'The build number from the upstream build job')
        string(name: 'SIGN_NUMBER_PARAM', defaultValue: '', description: 'The build number from the upstream sign job')
        booleanParam(name: 'DRY_RUN', defaultValue: true, description: 'If true, treat this as a dry run (no deployment of artifacts)')
    }
    environment {
        THEIA_IDE_JENKINS_CI = 'true'
        NODE_OPTIONS = '--max_old_space_size=4096'
    }
    stages {
      stage('Update and Upload') {
        parallel {
            stage('Linux: Upload') {
                agent any
                steps {
                    checkout scm
                    echo "Fetching Linux artifacts from build job #${params.BUILD_NUMBER_PARAM}"
                    
                    // Retry copy artifacts with timeout to handle large files (up to 800 MiB)
                    retry(3) {
                        timeout(time: 20, unit: 'MINUTES') {
                            copyArtifacts(
                                projectName: 'theia-ide-release',
                                selector: specific("${params.BUILD_NUMBER_PARAM}"),
                                filter: 'applications/electron/dist/linux/*',
                                target: '.',
                                fingerprintArtifacts: true
                            )
                        }
                    }

                    script {
                        uploadInstaller('linux', 'linux')
                    }
                }
            }
            stage('Mac: Update Metadata and Upload') {
                agent {
                    kubernetes {
                        yaml """
apiVersion: v1
kind: Pod
spec:
  podRetention: never()
  containers:
  - name: theia-dev
    image: eclipsetheia/theia-blueprint:builder
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    resources:
      limits:
        memory: "1700Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "200m"
    volumeMounts:
    - name: global-cache
      mountPath: /.cache
    - name: global-yarn
      mountPath: /.yarn      
    - name: global-npm
      mountPath: /.npm      
    - name: electron-cache
      mountPath: /.electron-gyp
  - name: jnlp
    resources:
      limits:
        memory: "2300Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    volumeMounts:
    - name: volume-known-hosts
      mountPath: /home/jenkins/.ssh
  volumes:
  - name: global-cache
    emptyDir: {}
  - name: global-yarn
    emptyDir: {}
  - name: global-npm
    emptyDir: {}
  - name: electron-cache
    emptyDir: {}
  - name: volume-known-hosts
    configMap:
      name: known-hosts
"""
                    }
                }
                steps {
                    checkout scm
                    echo "Fetching Mac artifacts from sign job #${params.SIGN_NUMBER_PARAM}"
                    
                    // Retry copy artifacts with timeout to handle large files (up to 800 MiB)
                    retry(3) {
                        timeout(time: 20, unit: 'MINUTES') {
                            copyArtifacts(
                                projectName: 'theia-ide-sign-notarize',
                                selector: specific("${params.SIGN_NUMBER_PARAM}"),
                                filter: 'applications/electron/dist/mac-x64/**',
                                target: '.',
                                fingerprintArtifacts: true
                            )
                        }
                    }
                    
                    container('theia-dev') {
                        withCredentials([string(credentialsId: "github-bot-token", variable: 'GITHUB_TOKEN')]) {
                            script {
                                def packageJSON = readJSON file: "package.json"
                                String version = "${packageJSON.version}"
                                updateMetadata('mac-x64/TheiaIDE-' + version + '-mac.zip', 'mac-x64/latest-mac.yml', 'macos', false, '.zip', 1200)
                                updateMetadata('mac-x64/TheiaIDE.dmg', 'mac-x64/latest-mac.yml', 'macos', false, '.dmg', 1200)
                            }
                        }
                    }
                    container('jnlp') {
                        script {
                            uploadInstaller('macos', 'mac-x64')
                        }
                    }
                }
            }
            stage('Mac-Arm: Update Metadata and Upload') {
                agent {
                    kubernetes {
                        yaml """
apiVersion: v1
kind: Pod
spec:
  podRetention: never()
  containers:
  - name: theia-dev
    image: eclipsetheia/theia-blueprint:builder
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    resources:
      limits:
        memory: "1700Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "200m"
    volumeMounts:
    - name: global-cache
      mountPath: /.cache
    - name: global-yarn
      mountPath: /.yarn      
    - name: global-npm
      mountPath: /.npm      
    - name: electron-cache
      mountPath: /.electron-gyp
  - name: jnlp
    resources:
      limits:
        memory: "2300Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    volumeMounts:
    - name: volume-known-hosts
      mountPath: /home/jenkins/.ssh
  volumes:
  - name: global-cache
    emptyDir: {}
  - name: global-yarn
    emptyDir: {}
  - name: global-npm
    emptyDir: {}
  - name: electron-cache
    emptyDir: {}
  - name: volume-known-hosts
    configMap:
      name: known-hosts
"""
                    }
                }
                steps {
                    checkout scm
                    echo "Fetching Mac-Arm artifacts from sign job #${params.SIGN_NUMBER_PARAM}"
                    
                    // Retry copy artifacts with timeout to handle large files (up to 800 MiB)
                    retry(3) {
                        timeout(time: 20, unit: 'MINUTES') {
                            copyArtifacts(
                                projectName: 'theia-ide-sign-notarize',
                                selector: specific("${params.SIGN_NUMBER_PARAM}"),
                                filter: 'applications/electron/dist/mac-arm64/**',
                                target: '.',
                                fingerprintArtifacts: true
                            )
                        }
                    }

                    container('theia-dev') {
                        withCredentials([string(credentialsId: "github-bot-token", variable: 'GITHUB_TOKEN')]) {
                            script {
                                def packageJSON = readJSON file: "package.json"
                                String version = "${packageJSON.version}"
                                updateMetadata('mac-arm64/TheiaIDE-' + version + '-arm64-mac.zip', 'mac-arm64/latest-mac.yml', 'macos-arm', false, '.zip', 1200)
                                updateMetadata('mac-arm64/TheiaIDE.dmg', 'mac-arm64/latest-mac.yml', 'macos-arm', false, '.dmg', 1200)
                            }
                        }
                    }
                    container('jnlp') {
                        script {
                            uploadInstaller('macos-arm', 'mac-arm64')
                        }
                    }
                }
            }
            stage('Windows: Update Metadata and Upload') {
                agent {
                    kubernetes {
                        yaml """
apiVersion: v1
kind: Pod
spec:
  podRetention: never()
  containers:
  - name: theia-dev
    image: eclipsetheia/theia-blueprint:builder
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    resources:
      limits:
        memory: "1700Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "200m"
    volumeMounts:
    - name: global-cache
      mountPath: /.cache
    - name: global-yarn
      mountPath: /.yarn      
    - name: global-npm
      mountPath: /.npm      
    - name: electron-cache
      mountPath: /.electron-gyp
  - name: jnlp
    resources:
      limits:
        memory: "1000Mi"
        cpu: "1000m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    volumeMounts:
    - name: volume-known-hosts
      mountPath: /home/jenkins/.ssh
  volumes:
  - name: global-cache
    emptyDir: {}
  - name: global-yarn
    emptyDir: {}
  - name: global-npm
    emptyDir: {}
  - name: electron-cache
    emptyDir: {}
  - name: volume-known-hosts
    configMap:
      name: known-hosts
"""
                    }
                }
                steps {
                    checkout scm
                    echo "Fetching Windows artifacts from sign job #${params.SIGN_NUMBER_PARAM}"
                    
                    // Retry copy artifacts with timeout to handle large files (up to 800 MiB)
                    retry(3) {
                        timeout(time: 20, unit: 'MINUTES') {
                            copyArtifacts(
                                projectName: 'theia-ide-sign-notarize',
                                selector: specific("${params.SIGN_NUMBER_PARAM}"),
                                filter: 'applications/electron/dist/windows/*',
                                target: '.',
                                fingerprintArtifacts: true
                            )
                        }
                    }

                    container('theia-dev') {
                        withCredentials([string(credentialsId: "github-bot-token", variable: 'GITHUB_TOKEN')]) {
                            script {
                                updateMetadata('windows/TheiaIDESetup.exe', 'windows/latest.yml', 'windows', true, '.exe', 1200)
                            }
                        }
                    }
                    container('jnlp') {
                        script {
                            echo 'Computing updatable versions before uploading new installer'
                            def updatableVersions = getUpdatableVersions()
                            echo 'updatableVersions: ' + updatableVersions
                            uploadInstaller('windows', 'windows')
                            copyInstallerAndUpdateLatestYml('windows', 'TheiaIDESetup', 'exe', 'latest.yml', updatableVersions)
                            }
                        }
                    }
                }
            }
        }
    }
}

def updateMetadata(String executable, String yaml, String platform, Boolean updatePaths, String fileExtension, int sleepBetweenRetries) {
    int maxRetry = 4
    try {
        // Install dependencies and update metadata
        sh "yarn install --network-timeout 100000 --force"
        sh "yarn electron update:blockmap -e ${executable}"
        sh "yarn electron update:checksum -e ${executable} -y ${yaml} -p ${platform} -u ${updatePaths} -f ${fileExtension}"
    } catch (error) {
        retry(maxRetry) {
            sleep(sleepBetweenRetries)
            echo "yarn failed - Retrying"
            sh "yarn install --network-timeout 100000 --force"
            sh "yarn electron update:blockmap -e ${executable}"
            sh "yarn electron update:checksum -e ${executable} -y ${yaml} -p ${platform} -u ${updatePaths} -f ${fileExtension}"
        }
    }
}

def uploadInstaller(String platform, String folder = '') {
    if (!isDryRun()) {
        String targetFolder = folder ? "applications/electron/dist/${folder}" : "applications/electron/dist"
        def packageJSON = readJSON file: "package.json"
        String version = "${packageJSON.version}"
        
        sshagent(['projects-storage.eclipse.org-bot-ssh']) {
            // Remove and recreate version-specific folder
            sh "ssh genie.theia@projects-storage.eclipse.org rm -rf /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}"
            sh "ssh genie.theia@projects-storage.eclipse.org mkdir -p /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}"
            sh "scp ${targetFolder}/*.* genie.theia@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}"
            
            // Remove and recreate latest folder
            sh "ssh genie.theia@projects-storage.eclipse.org rm -rf /home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}"
            sh "ssh genie.theia@projects-storage.eclipse.org mkdir -p /home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}"
            sh "scp ${targetFolder}/*.* genie.theia@projects-storage.eclipse.org:/home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}"
        }
    } else {
        echo "Skipped upload for dry run"
        echo "Would have uploaded the following artifacts"
        sh "ls -l applications/electron/dist/${folder}"
    }
}

/**
 * List all directories in the ide-preview directory that represent versions.
 * Only include version numbers lower than the current version.
 */
def getUpdatableVersions() {
    def packageJSON = readJSON file: "package.json"
    String currentVersion = "${packageJSON.version}"
    
    def versions = ''
    
    sshagent(['projects-storage.eclipse.org-bot-ssh']) {
        versions = sh(
            script: """
            ssh genie.theia@projects-storage.eclipse.org "cd /home/data/httpd/download.eclipse.org/theia/ide-preview/ && \
            find . -maxdepth 1 -type d -regex '.*/[0-9]+\\.[0-9]+\\.[0-9]+' -exec basename {} \\; | sort -V | awk -v curVer='${currentVersion}' '{
                if (\\\$1 != curVer && \\\$1 < curVer) print \\\$1
            }' | paste -sd ','"
            """,
            returnStdout: true
        ).trim()
    }
    
    return versions
}

/**
 * For Windows, create a versioned copy of the installer for updates
 * and update the latest.yml file for older versions.
 */
def copyInstallerAndUpdateLatestYml(String platform, String installer, String extension, String yaml, String updatableVersions) {
    if (!isDryRun()) {
        def packageJSON = readJSON file: "package.json"
        String version = "${packageJSON.version}"
        
        sshagent(['projects-storage.eclipse.org-bot-ssh']) {
            // Create versioned copies of installer and blockmap files
            sh "ssh genie.theia@projects-storage.eclipse.org cp /home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}/${installer}.${extension} /home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}/${installer}-${version}.${extension}"
            sh "ssh genie.theia@projects-storage.eclipse.org cp /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}/${installer}.${extension} /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}/${installer}-${version}.${extension}"
            sh "ssh genie.theia@projects-storage.eclipse.org cp /home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}/${installer}.${extension}.blockmap /home/data/httpd/download.eclipse.org/theia/ide-preview/latest/${platform}/${installer}-${version}.${extension}.blockmap"
            sh "ssh genie.theia@projects-storage.eclipse.org cp /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}/${installer}.${extension}.blockmap /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}/${installer}-${version}.${extension}.blockmap"
        }
        
        // Update latest.yml for older versions to enable auto-updates
        if (updatableVersions.length() > 0) {
            for (oldVersion in updatableVersions.split(",")) {
                sshagent(['projects-storage.eclipse.org-bot-ssh']) {
                    sh "ssh genie.theia@projects-storage.eclipse.org rm -f /home/data/httpd/download.eclipse.org/theia/ide-preview/${oldVersion}/${platform}/${yaml}"
                    sh "ssh genie.theia@projects-storage.eclipse.org cp /home/data/httpd/download.eclipse.org/theia/ide-preview/${version}/${platform}/${yaml} /home/data/httpd/download.eclipse.org/theia/ide-preview/${oldVersion}/${platform}/${yaml}"
                }
            }
        } else {
            echo "No updateable versions found"
        }
    } else {
        echo "Skipped copying installer for dry run"
    }
}

// Helper function for dry run status
def isDryRun() {
    return params.DRY_RUN
}