# Load the base-ide image, only copy from here
FROM ghcr.io/ls1intum/theia/base as base-ide

# Load the plugin image, only copy from here
FROM node:18-bullseye as plugin-image

WORKDIR /home/theia

# Configure to skip download of puppeteer
ENV PUPPETEER_SKIP_DOWNLOAD true

# Copy required configuration files
COPY yarn.lock yarn.lock

# Copy image specific files - this should overwrite the default files from the repository
COPY images/haskell/package.json .

# Remove unnecesarry files for the browser application
# Download plugins and build application production mode
# Use yarn autoclean to remove unnecessary files from package dependencies
RUN yarn --pure-lockfile --network-timeout 1000000 && \
    yarn download:plugins

# Assemble the application
# Adapted from https://github.com/uni-passau-artemis/artemis-haskell/blob/main/Dockerfile
FROM docker.io/library/debian:stable as final-ide

WORKDIR /home/theia

# Copy IDE files
COPY --from=base-ide /home/theia/applications/browser/lib/backend /home/theia/applications/browser/lib/backend
COPY --from=base-ide /home/theia/applications/browser/ /home/theia/applications/browser/

# Copy plugins
COPY --from=base-ide /home/theia/plugins /home/theia/plugins
COPY --from=plugin-image /home/theia/plugins /home/theia/plugins

# Create theia user and directories
# Application will be copied to /home/theia
# Default workspace is located at /home/project
RUN adduser --system --group theia
RUN chmod g+rw /home && \
    mkdir -p /home/project && \
    chown -R theia:theia /home/theia && \
    chown -R theia:theia /home/project

# Copy node from plugin-image as it is required for Theia 
COPY --from=plugin-image /usr/local/bin/node /usr/local/bin/
COPY --from=plugin-image /usr/local/lib/node_modules/ /usr/local/lib/node_modules/
COPY --from=plugin-image /usr/local/lib/node_modules/ /home/theia/node_modules/
COPY --from=plugin-image /home/theia/node_modules/ /home/theia/node_modules/

# Install required tools for tool creation and terminal usage: wget, apt-transport-https, update & upgrade packages, bash
RUN apt-get update && \
    apt-get install -y wget apt-transport-https bash && \
    apt-get upgrade -y

# Install and copy Haskell dependencies
ENV STACK_ROOT /stack_cache
RUN mkdir -p $STACK_ROOT
COPY images/haskell/stack-config/config.yaml $STACK_ROOT/config.yaml
COPY images/haskell/stack-config/global-project/stack.yaml $STACK_ROOT/global-project/stack.yaml

# Install Haskell dependencies
RUN apt-get update \
    && apt-get -y install curl perl tar llvm libnuma-dev \
    && bash -c "curl -sSL https://get.haskellstack.org/ | sh" \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# We install stack as the main CLI tool.
# It bundles the creation of new projects (`stack new`), building (`stack build`) and finally running (`stack exec`) Haskell projects.
RUN stack setup && \
    stack ghc \
        --package QuickCheck \
        --package quickcheck-assertions \
        --package smallcheck \
        --package tasty \
        --package tasty-ant-xml \
        --package tasty-hunit \
        --package tasty-quickcheck \
        --package tasty-smallcheck \
        --package unordered-containers \
        -- --version \
    && chmod -R a+rw $STACK_ROOT

# Specify default shell for Theia and the Built-In plugins directory
ENV SHELL=/bin/bash \
    THEIA_DEFAULT_PLUGINS=local-dir:/home/theia/plugins

# Use installed git instead of dugite
ENV USE_LOCAL_GIT true 

ENV HOME /home/theia
EXPOSE 3000

# Switch to Theia user
USER theia
WORKDIR /home/theia/applications/browser

# Launch the backend application via node
ENTRYPOINT [ "node", "/home/theia/applications/browser/lib/backend/main.js" ]

# Arguments passed to the application
CMD [ "/home/project", "--hostname=0.0.0.0" ]
